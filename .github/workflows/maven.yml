# The following workflow provides an opinionated template you can customize for your own needs.
#
# If you are not an Octopus user, the "Push to Octopus", "Generate Octopus Deploy build information",
# and "Create Octopus Release" steps can be safely deleted.
#
# To configure Octopus, set the OCTOPUS_API_TOKEN secret to the Octopus API key, and
# set the OCTOPUS_SERVER_URL secret to the Octopus URL.
#
# Double check the "project" and "deploy_to" properties in the "Create Octopus Release" step
# match your Octopus projects and environments.
#
# Get a trial Octopus instance from https://octopus.com/start

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: '0'
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: 5.x
    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        additionalArguments: /overrideconfig mode=Mainline
    - name: Install Octopus Deploy CLI
      uses: OctopusDeploy/install-octocli@v1.1.1
      with:
        version: latest
    - name: Set up JDK 1.17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: adopt
    - name: Set Version
      run: ./mvnw --batch-mode versions:set -DnewVersion=${{ steps.determine_version.outputs.semVer }}
      shell: bash
    - name: List Dependencies
      run: ./mvnw --batch-mode dependency:tree --no-transfer-progress > dependencies.txt
      shell: bash
    - name: Collect Dependencies
      uses: actions/upload-artifact@v2
      with:
        name: Dependencies
        path: dependencies.txt
    - name: List Dependency Updates
      run: ./mvnw --batch-mode versions:display-dependency-updates > dependencyUpdates.txt
      shell: bash
    - name: Collect Dependency Updates
      uses: actions/upload-artifact@v2
      with:
        name: Dependencies Updates
        path: dependencyUpdates.txt
    - name: Test
      run: ./mvnw --batch-mode test
      shell: bash
    - if: always()
      name: Report
      uses: dorny/test-reporter@v1
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: 'false'
    - name: Package
      run: ./mvnw --batch-mode -DskipTests=true package
      shell: bash
    - id: get_artifact
      name: Get Artifact Path
      run: |-
        # Find the largest WAR or JAR, and assume that was what we intended to build.
        echo "::set-output name=artifact::$(find target -type f \( -iname \*.jar -o -iname \*.war \) -printf "%p\n" | sort -n | head -1)"
      shell: bash
    - id: get_artifact_name
      name: Get Artifact Name
      run: |-
        # Get the filename without a path
        path="${{ steps.get_artifact.outputs.artifact }}"
        echo "::set-output name=artifact::${path##*/}"
      shell: bash
    - name: Tag Release
      uses: mathieudutour/github-tag-action@v6.0
      with:
        custom_tag: ${{ steps.determine_version.outputs.semVer }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create_release
      name: Create Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.determine_version.outputs.semVer }}+run${{ github.run_number }}-attempt${{ github.run_attempt }}
        release_name: Release ${{ steps.determine_version.outputs.semVer }} Run ${{ github.run_number }} Attempt ${{ github.run_attempt }}
        draft: 'false'
        prerelease: 'false'
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.get_artifact.outputs.artifact }}
        asset_name: ${{ steps.get_artifact_name.outputs.artifact }}
        asset_content_type: application/octet-stream
    - id: get_octopus_artifact
      name: Create Octopus Artifact
      run: |-
        # Octopus expects artifacts to have a specific file format
        file="${{ steps.get_artifact.outputs.artifact }}"
        extension="${file##*.}"
        octofile="SampleMavenProject-Quarkus.${{ steps.determine_version.outputs.semVer }}.${extension}"
        cp ${file} ${octofile}
        echo "::set-output name=artifact::${octofile}"
        # The version used when creating a release is the package id, colon, and version
        octoversion="SampleMavenProject-Quarkus:${{ steps.determine_version.outputs.semVer }}"
        echo "::set-output name=octoversion::${octoversion}"
        ls -la
      shell: bash
    - name: Push to Octopus
      uses: OctopusDeploy/push-package-action@v1.1.1
      with:
        api_key: ${{ secrets.OCTOPUS_API_TOKEN }}
        packages: ${{ steps.get_octopus_artifact.outputs.artifact }}
        server: ${{ secrets.OCTOPUS_SERVER_URL }}
        overwrite_mode: OverwriteExisting
    - name: Generate Octopus Deploy build information
      uses: xo-energy/action-octopus-build-information@v1.1.2
      with:
        octopus_api_key: ${{ secrets.OCTOPUS_API_TOKEN }}
        octopus_project: SampleMavenProject-Quarkus
        octopus_server: ${{ secrets.OCTOPUS_SERVER_URL }}
        push_version: ${{ steps.determine_version.outputs.semVer }}
        push_package_ids: SampleMavenProject-Quarkus
        push_overwrite_mode: OverwriteExisting
        output_path: octopus
    - name: Create Octopus Release
      uses: OctopusDeploy/create-release-action@v1.1.1
      with:
        api_key: ${{ secrets.OCTOPUS_API_TOKEN }}
        project: SampleMavenProject-Quarkus
        server: ${{ secrets.OCTOPUS_SERVER_URL }}
        deploy_to: Development
        packages: ${{ steps.get_octopus_artifact.outputs.octoversion }}
name: Java Maven Build
'on':
  workflow_dispatch: {}
  push: {}
